Guía: Creación de un Bot de Telegram desde cero
Voy a dividir esto en pautas generales (para cualquier bot de Telegram), pautas específicas (para este bot de contraseñas), apuntes importantes y ayudas para futuros bots.

Pautas Generales para Crear un Bot de Telegram
Entender cómo funcionan los bots de Telegram
Los bots de Telegram son programas que interactúan con usuarios a través de la API de Telegram (una interfaz que te permite enviar y recibir mensajes).
Usa la librería python-telegram-bot porque simplifica la conexión con esta API.
Concepto clave: Todo en un bot se basa en "eventos" (mensajes, comandos, clics) y "respuestas" (lo que el bot hace).
Ejemplo: Cuando alguien escribe /start, el bot detecta el evento y responde.
Configurar el entorno de desarrollo
Instala Python (versión 3.8+ recomendada) si no lo tienes.
Usa un editor como VSCode para escribir y depurar código.
Instala la librería base: pip install python-telegram-bot.
Por qué: Esta librería te da herramientas como Application para conectar al bot y Handlers para manejar eventos.
Obtener un token de Telegram
Crea un bot con @BotFather en Telegram:
Escribe /newbot.
Dale un nombre (ej. MyPasswordBot).
Obtén un token como 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11.
Este token es la "llave" para que tu código controle el bot.
Por qué: Sin él, Telegram no sabe qué programa es tu bot.
Estructura básica de un bot
Necesitas:
Iniciar el bot: Con Application.builder().token().
Manejar eventos: Usa "handlers" (como CommandHandler) para responder a comandos o mensajes.
Ciclo de ejecución: application.run_polling() escucha eventos continuamente.
Ejemplo básico:
python
Ajuste
Copiar
from telegram.ext import Application, CommandHandler, ContextTypes
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("¡Hola!")
def main():
    app = Application.builder().token("TU_TOKEN").build()
    app.add_handler(CommandHandler("start", start))
    app.run_polling()
if __name__ == "__main__":
    main()
Por qué: Esto es el esqueleto de cualquier bot.
Manejar interacciones avanzadas
Comandos: Usa CommandHandler para responder a /algo.
Mensajes normales: Usa MessageHandler para texto libre.
Botones: Usa InlineKeyboardButton y CallbackQueryHandler para menús interactivos.
Conversaciones: Usa ConversationHandler para flujos complejos (como pedir datos paso a paso).
Por qué: Esto te da flexibilidad para hacer bots simples o complejos.
Gestionar datos
Usa estructuras como listas, diccionarios o bases de datos (SQLite, por ejemplo) para guardar información.
Ejemplo: Guardar el nombre de un usuario en una base de datos.
Por qué: Sin almacenamiento, el bot "olvida" todo al reiniciarse.
Añadir seguridad
Usa cifrado (como cryptography) si manejas datos sensibles.
Valida entradas del usuario para evitar errores o ataques.
Por qué: Proteger datos es crucial en bots públicos.
Depurar y mejorar
Prueba cada función con print() o usa un depurador en tu editor.
Añade manejo de errores con try/except para evitar que el bot se caiga.
Por qué: Un bot estable es más usable.
Pautas Específicas para el Bot de Contraseñas
Ahora aplicamos las pautas generales a este bot específico, con detalles técnicos y razonamientos.

Configuración inicial
Librerías extra: Además de python-telegram-bot, instalamos:
cryptography (pip install cryptography): Para cifrar contraseñas.
paypalrestsdk (pip install paypalrestsdk): Para pagos.
sqlite3: Viene con Python, no necesitas instalarlo.
Token: Pega tu token en Application.builder().token("TU_TOKEN").
PayPal: Crea una app en PayPal Developer, obtén client_id y client_secret, y ponlos en paypalrestsdk.configure().
Estructura del bot
Usa ConversationHandler con estados (PIN, OPTION, etc.) porque el bot necesita:
Pedir un PIN al inicio.
Mostrar un menú y esperar una acción (guardar, ver, generar).
Código clave:
python
Ajuste
Copiar
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start), CommandHandler("menu", menu)],
    states={PIN: [...], OPTION: [...], ...},
    fallbacks=[]
)
Razona: Esto organiza las interacciones como un "diálogo guiado".
Base de datos con SQLite
Función: init_db() crea dos tablas:
users: user_id (único), pin (texto), paid (0 o 1).
passwords: user_id, site, password (cifrada).
Código:
python
Ajuste
Copiar
conn = sqlite3.connect("passwords.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS users ...")
Razona: SQLite es ligero y guarda datos permanentemente sin servidor externo.
Cifrado con Fernet
Genera una clave única en secret.key:
python
Ajuste
Copiar
if not os.path.exists("secret.key"):
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)
Cifra contraseñas antes de guardarlas:
python
Ajuste
Copiar
encrypted_password = CIPHER.encrypt(password.encode()).decode()
Descifra al mostrarlas:
python
Ajuste
Copiar
pwd = CIPHER.decrypt(enc_pwd.encode()).decode()
Razona: Esto asegura que nadie pueda leer las contraseñas sin la clave.
Menú interactivo
Crea una función reusable show_menu() con botones:
python
Ajuste
Copiar
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message="¿Qué desea hacer?"):
    keyboard = [[InlineKeyboardButton("Guardar contraseña", callback_data="save")], ...]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)
Maneja clics con button():
python
Ajuste
Copiar
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "save":
        await query.edit_message_text("Envíame 'sitio:contraseña':")
        return SAVE_PASSWORD
Razona: Los botones son más intuitivos que comandos y show_menu() lo hace reutilizable.
Lógica de las acciones
Guardar: Verifica el límite (count >= 15 y not paid), cifra y guarda en la base de datos.
Ver: Pide PIN, valida, desencripta y muestra.
Generar: Usa random.choice() para crear contraseñas aleatorias.
Info: Texto estático con explicación.
Razona: Cada acción tiene su estado en ConversationHandler para mantener el flujo claro.
Sistema de pago
Configura PayPal con paypalrestsdk.configure().
Crea un pago con Payment.create() y verifica con Payment.execute():
python
Ajuste
Copiar
payment = paypalrestsdk.Payment({...})
if payment.create():
    await update.message.reply_text(f"Paga aquí: {link.href}")
Actualiza paid = 1 en la base de datos tras el pago.
Razona: Esto monetiza el bot limitando funciones gratuitas.
Finalización
Llama a todas las funciones en main() y usa run_polling():
python
Ajuste
Copiar
def main():
    init_db()
    app = Application.builder().token("TU_TOKEN").build()
    app.add_handler(conv_handler)
    app.run_polling()
Razona: Esto une todo y mantiene el bot activo.
Apuntes Importantes (No Olvidar)
Asyncio y async/await:
Este bot usa funciones asíncronas (async def) porque python-telegram-bot v20+ es asíncrono.
Siempre usa await para operaciones como enviar mensajes (await update.message.reply_text()).
Por qué: Permite manejar muchos usuarios a la vez sin bloquearse.
Manejo de errores:
Usa try/except en lugares críticos (como convertir texto a número en generate_password()).
Ejemplo:
python
Ajuste
Copiar
try:
    length = int(update.message.text)
except ValueError:
    await update.message.reply_text("Número inválido")
Por qué: Evita que el bot se caiga por entradas malas.
Base de datos segura:
Nunca compartas secret.key ni passwords.db públicamente.
Usa .gitignore si subes a GitHub: añade secret.key y passwords.db.
Por qué: Son datos sensibles.
Estados en ConversationHandler:
Define estados como PIN = 0, OPTION = 1, etc., para que el bot sepa "dónde está".
Usa return ConversationHandler.END para salir del flujo.
Por qué: Sin esto, el bot se confunde con mensajes inesperados.
PayPal avanzado:
Las URLs de redirección (return_url, cancel_url) necesitan un servidor real (no localhost) en producción.
Investiga "webhooks" para verificar pagos automáticamente.
Por qué: localhost solo funciona en pruebas locales.F
Ayudas para Crear Otros Bots
Empieza pequeño:
Haz un bot simple (como uno que repita mensajes) para practicar:
python
Ajuste
Copiar
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(update.message.text)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
Luego añade funciones paso a paso.
Aprende estructuras comunes:
Comandos: Usa CommandHandler para /start, /help, etc.
Botones: Copia show_menu() y adapta los botones.
Datos: Usa diccionarios para cosas simples o SQLite para más complejidad.
Explora la documentación:
Lee python-telegram-bot docs para más ejemplos.
Busca "Telegram Bot API" en Google para entender los límites de Telegram.
Personaliza este bot como práctica:
Cambia el límite de 15 a 10 (count >= 10).
Añade un comando /stats que diga cuántas contraseñas tiene el usuario:
python
Ajuste
Copiar
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM passwords WHERE user_id = ?", (user_id,))
    count = c.fetchone()[0]
    await update.message.reply_text(f"Tienes {count} contraseñas.")
    conn.close()
app.add_handler(CommandHandler("stats", stats))
Ideas para otros bots:
Notas: Guarda texto en una base de datos.
Clima: Usa una API como OpenWeatherMap.
Recordatorios: Usa context.job_queue para programar mensajes.
Resumen
Generales: Aprendiste la base de cualquier bot: token, handlers, flujo, datos.
Específicas: Este bot te enseña SQLite, cifrado, botones y pagos.
Apuntes: No olvides async, errores, seguridad.
Ayudas: Empieza simple y crece, usa este código como plantilla.
Ahora tienes una guía completa para este bot y una base para otros. 

¡Prueba modificarlo o crea uno nuevo! Si te atascas, pregunta y lo resolvemos juntos. 

¿Qué te parece empezar con algo pequeño como práctica?